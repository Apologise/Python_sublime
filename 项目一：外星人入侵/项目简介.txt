1 游戏简介
在游戏《外星人入侵》中，玩家控制着一艘最初出现在屏幕底部中央的飞船。玩家可以使用箭头键左右移动飞船，还可以使用空格键进行射击。游戏开始时，一群外星人出现在天空中，他们在屏幕中向下移动。玩家的任务是射杀这些外星人。玩家将所有的外星人都消灭干净后，将出现一群新的外星人，他们的移动速度更快。只要有外星人撞到了玩家的飞船或者达到了屏幕的底部，玩家就损失一艘飞船。玩家损失三艘飞船后，游戏结束。

2.第一阶段
创建一艘可以左右移动的飞船，这艘飞船在用户按空格键时能够开火。设置好这种行为后，我们就可以将注意力转向外星人，并提高这款游戏的可玩性。
	2.1 安装Pygame
		使用pip安装Pygame,命令为：
		pip3 install pygame
	2.2 开始游戏项目
		首先想创建一个空的Pygame窗口，供后面用来绘制游戏元素，如飞船和外星人。我们还将让这个游戏响应用户输入、设置背景色以及加载飞船图像。
		2.2.1 创建窗口及初始化
		使用Pygame编写的游戏基本结构如下：
		alien_invasion.py
		首先需要导入模块sys和pygame。模块pygame包含游戏开发所需的功能，sys模块用于游戏退出功能。
		这个游戏是由一个while循环来控制，其中包含一个事件循环以及管理屏幕更新的代码。事件是用户所发出的操作。当玩家点击关闭按钮，将检测到pygame.QUIT事件，来调用sys.exit()退出游戏。
		pygame.init():                 初始化背景设置
		pygame.display.set_mode():     创建一个名为screen(变量名)的显示窗口。参数"(1200, 而不是pygame.display.set_mode(1200,800),否则会报错。
		pygame.event.get():            访问pygame检测到的事件
		pygame.display.flip():         命令pygame让最近绘制的屏幕可见。每次执行while时会绘制一个空屏幕，擦除旧的屏幕
		run_game():                    启动游戏

		2.2.2 设置背景色
		Pygame默认创建一个黑色屏幕，这实在太丑了。可以将背景设置为另外一种背景色：
		alien_invasion.py
		用元祖bg_color(230,230,230)保存RGB颜色。
		调用方法screen.fill()，用背景色填充屏幕；这个方法只接受一个实参，一种颜色

		2.2.3 创建设置类
		每次给游戏添加新功能时，通常引入一些新的设置。因此编写一个类来保存游戏的设置参数是非常有必要的。
		settings.py
		在主程序中，我们导入Settings类，调用pygame.init()，在创建一个Settings的一个实例，并将其储存在变量ai_settings中。


2 项目第二阶段
项目的第二阶段做的功能有三点：
	1.为飞船添加移动功能，让飞船在屏幕范围内移动
		A.创建飞船类，在控制飞船左右以及上下移动时，需要定义一个键盘按键响应函数check_keydown_events(),注意在该函数中使用的是elif而不是if，因为每个按键分别属于不同的事件。另外我们需要按住按键（按住不动）飞船便不停的移动而不是每次单击按键，所以需要设置一个移动状态（上下左右），当按键松开后将状态设置为false。
		B.其次屏幕左右是墙壁，所以当飞船在墙壁边缘便不能移动，这里主要是在移动函数中判断当前的x左边是否在有效范围内，不在便什么都不执行。

	2.为飞船添加开火功能
		A。开火功能是发射子弹，所以要添加一个子弹类,其中子弹类要继承pygame的Sprite属性，这要做的目的是为了方便集中所有的子弹对象，每次按空格键便创建一个子弹对象，加入到pygame中的Group管理类中。其次当子弹发射后到达屏幕顶端便会消失，但是消失的子弹对象仍在内存中，所以需要对消失的子弹进行回收，具体逻辑是判断子弹的y坐标到达顶端后便移除子弹Group中的子弹。
		B.为了提高游戏难度，屏幕上的子弹个数有限制，在主程序文件判断子弹的个数，如果子弹个数小于设定的参数值便执行子弹更新函数。

	3.如何对代码进行重构(最重要！！！)
		随着项目的进行，功能会越来越多，代码在文件中显得非常臃肿，所以进行代码重构非常重要！！！
		对代码的重构有三点：
		A.创建game_function.py管理游戏中的功能，包括游戏按键事件触发，子弹的更新显示
		B.创建游戏参数设置类ai_setttings.py这个文件包含所有的参数，包括屏幕、飞船、子弹的参数,因此每次修改游戏参数只需要在该文件修改   即可。

总结学到的知识点：
1.利用面向对象思想，为每一个有现实意义的实体创建对象。其次这个实体的功能。比如飞船的移动功能。游戏的总体功能结构（按键事件出发）。子弹的绘制。

2.将每个具有代表的功能编写一个函数。在主游戏界面，主要有如下函数：
gf.check_events(ai_settings, screen, ship, bullets)  ：按键事件触发函数
ship.update(ai_settings, screen, ship, bullets)		 ：飞船状态更新函数
gf.update_bullets(bullets)                           ：子弹状态更新函数
gf.update_screen(ai_settings, screen, ship, bullets) ：主屏幕更新函数

3.===游戏中对边界活动范围的控制方法==
  ===游戏中参数的集中管理。===
  ===按住按键使飞船不停的移动而不是单击按键使其移动的逻辑编写===